#!/bin/bash

lb_log_location=~/"logs.txt"
lb_config_location=~/"server/load-balancer/config.yml"

function printUsage() {
  echo "usage: ./infra <command> [<options>]"
  echo "   lb-log [<options>]          View load balancer logs"
  echo "   lb-config                   View load balancer config file"
  echo "   restart [<options>]         Restart server or load balancer"
  echo "   status [<options>]          View status information"
}

function printLbLogUsage() {
  echo "usage: ./infra lb-log [<output-format> [<options>]]"
  echo "   tail [<options>]"
  echo "       -#                      Output last # lines"
  echo "       -r, --regex=[<regex>]   Match output against regexp"
  echo "   cat [<options>]"
  echo "       -r, --regex=[<regex>]   Match output against regexp"
}

function printStatusUsage() {
  echo "usage: ./infra status <[options]>"
  echo "    -s, --server=<port>        Get server status"
  echo "    --lb                       Get load balancer status"
}

function printRestartUsage() {
  echo "usage: ./infra restart <[options]>"
  echo "    --lb                       Restart load balancer"
  echo "    -s, --server=<port>        Restart server with port number"
}

function lbLog() {
  # "infra lb-log" is equiv to "infra lb-log tail -20"
  if [ $# -eq 1 ]; then
    2="tail"
  fi

  case "$2" in
    "tail")
      regexp=""
      linenums="-20"
      arglist=("$3" "$4")

      for arg in "${arglist[@]}"; do
        case "$arg" in
          "")
            ;;
          "-"[123456789]*) # this is :fire:
            linenums="$arg"
            ;;
          "-r="*)
            regexp="$(cut -d'=' -f2 <<<$arg)"
            ;;
          "--regex="*)
            regexp="$(cut -d'=' -f2 <<<$arg)"
            ;;
          *)
            echo "Unknown flag \"$arg\""
            printLbLogUsage
            exit 1
        esac
      done
      echo "$(tail $linenums $lb_log_location | egrep "$regexp")"
      exit 0
      ;;
    "cat")
      regexp=""

      case "$3" in
        "")
          ;;
        "-r="*)
          regexp="$(cut -d'=' -f2 <<<$3)"
          ;;
        "--regex="*)
          regexp="$(cut -d'=' -f2 <<<$3)"
          ;;
        *)
          echo "Unknown flag \"$3\""
          printLbLogUsage
          exit 1
          ;;
      esac

      echo "$(cat $lb_log_location | egrep "$regexp")"
      exit 0
      ;;
    *)
      printLbLogUsage
      exit 1
      ;;
  esac
}

function lbConfig() {
  cat $lb_config_location
}

function status() {
  action=""
  case "$2" in
    "--server="*)
      action="server"
      ;;
    "-s="*)
      action="server"
      ;;
    "--lb")
      action="lb"
      ;;
    *)
      printStatusUsage
      exit 1
      ;;
  esac

  case "$action" in
    "server")
      port="$(cut -d'=' -f2 <<<$2)"
      respStatus=$(curl -s -o /dev/null -w "%{http_code}" localhost:$port)

      echo -n "Port $port: "
      if [ "$respStatus" == "000" ]; then
        echo "No Response"
        exit 0
      else
        echo "Responded with $respStatus"
        exit 0
      fi
      ;;
    "lb")
      respStatus=$(curl -s -o /dev/null -w "%{http_code}" localhost:80)

      if [ "$respStatus" == "000" ]; then
        echo "No Response"
        exit 0
      else
        echo "Responded with $respStatus"
        exit 0
      fi
      ;;
    *)
      printStatusUsage
      exit 1
      ;;
  esac
}

function restartServer() {
  echo "noop"
}

function restartLoadBalancer() {
  sudo pkill -f "lb-server"
  screen
  cd ~/server/load-balancer/
  ./lb-server >> ~/logs.txt 2>&1 &
  echo "Server restarted"
  exit 0
}

function restart(){
  case "$2" in
    "--lb")
      action="load-balancer"
      ;;

    "--server="*)
      action="server"
      ;;

    "-s="*)
      action="server"
      ;;

    *)
      printRestartUsage
      exit 1
      ;;
  esac

  case "$action" in
    "server")
      restart-server $3
      ;;

    "load-balancer")
      restartLoadBalancer
      ;;
  esac
}

if [ $# -eq 0 ]; then
  printUsage
  exit 1
fi

case "$1" in
  "-h")
    printUsage
    exit 1
    ;;
  "--help")
    printUsage
    exit 1
    ;;
  "lb-log")
    lbLog $@
    ;;

  "lb-config")
    lbConfig
    ;;

  "restart")
    restart $@
    ;;

  "status")
    status $@
    ;;

  *)
    printUsage
    exit 1
    ;;
esac
